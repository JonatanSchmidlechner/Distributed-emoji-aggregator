services:
  kafka:
    # Use readymade image from dockerhub.
    image: bitnami/kafka:3.6.1

    # Add to backend network. 
    networks: 
      - backend

    # Map container's port 9092 to host machine's port 9092.
    ports:
      - 9092:9092

    # The environment variables and values have been chosen according to an example here: https://hub.docker.com/r/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

    # This healthcheck checks that Kafka is operation ready. This is used in ensuring Kafka is
    # ready before starting services that are dependent on Kafka.
    healthcheck:
      # This tries to check kafka-api versions. If kafka is ready, it works and the healthcheck passes.
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 10s
      retries: 20

  server_a:

    # Tells docker-compose where the Dockerfile is for server A.
    build: ./backend/server_a

    # Maps host machine's port 8082 to container's port 8082
    ports:
      - "8082:8082"
    
    # This says that server_a waits for kafka to be ready before starting.
    depends_on:
      kafka:
        condition: service_healthy
    
    # Sets a couple of environment variables.
    environment:
      - KAFKA_BROKER=kafka:9092 # Name of the used kafka broker.
      - KAFKAJS_NO_PARTITIONER_WARNING=1 # This silences warnings for not using partitioner.
    
    # Add to backend network.
    networks:
      - backend

  emote_generator:

    # Tells where the Dockerfile for emotegen is.
    build: ./backend/emotegen

    # Maps host machine's port 3000 to container's port 3000.
    ports:
      - "3000:3000"
    
    # Will only start after Kafka is ready.
    depends_on:
      kafka:
        condition: service_healthy
      
    environment:
      - KAFKA_BROKER=kafka:9092 # Name of the used kafka broker.
      - KAFKAJS_NO_PARTITIONER_WARNING=1 # This silences warnings for not using partitioner.

    # Add to backend network.
    networks:
      - backend

  server_b:

      # Tells where the Dockerfile is for server B.
      build: ./backend/server_b

      # Maps host machine's port 8080 to container's port 8080.
      ports:
      - "8080:8080"

      # Server B will start only after kafka is ready.
      depends_on:
        kafka:
          condition: service_healthy

        
      environment:
        - KAFKA_BROKER=kafka:9092 # Name of the used kafka broker.
        - KAFKAJS_NO_PARTITIONER_WARNING=1 # This silences warnings for not using partitioner.

      # Adds server B to backend network.
      networks:
        - backend
      
      # This healthcheck checks that server B is operation ready. This is used in ensuring server B is
      # ready before starting services that are dependent on server B. 
      healthcheck:
        # This sends a get request to the REST API. If it responds with status ok, the healthcheck passes.
        test: ["CMD", "curl", "-f", "localhost:8080/settings/interval"]
        interval: 5s
        timeout: 10s
        retries: 5
      
      # This is used to sync settings.json in host machine and in container. This way when the host machine's settings.json
      # gets updated when the app is used in container.
      volumes:
        - "./backend/server_b/settings.json:/app/settings.json"

  frontend:

    # This tells where the Dockerfile for frontend is located.
    build:
      context: ./frontend
      dockerfile: Dockerfile
    
    # This maps host machine's port 8081 to container's port 80.
    ports:
      - "8081:80"
    
    # Frontend starts only after server b is ready and passes the healthcheck.
    depends_on:
      server_b:
        condition: service_healthy
    
    # Adds frontend to backend network.
    networks:
      - backend

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend: