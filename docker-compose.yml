# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

services:

  # You can base this service on a bitnami/kafka Docker Hub image.
  # You need to expose the kafka port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  kafka:
    image: bitnami/kafka:3.6.1
    networks: 
      - backend
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 10s
      retries: 20

  server_a:
    build: ./backend/server_a
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - backend

  emote_generator:
    build: ./backend/emotegen
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - backend

  # much of the server_b service entry can be copied from server_a
  # service above. Groups are free to
  # CRUD this set of instructions as they see fit.
  server_b:
      build: ./backend/server_b
      ports:
      - "8080:8080"
      depends_on:
        kafka:
          condition: service_healthy
      environment:
        - KAFKA_BROKER=kafka:9092
        - KAFKAJS_NO_PARTITIONER_WARNING=1
      networks:
        - backend
      healthcheck:
        test: ["CMD", "curl", "-f", "localhost:8080/settings/interval"]
        interval: 5s
        timeout: 10s
        retries: 5
      volumes:
        - "./backend/server_b/settings.json:/app/settings.json"

  # Frontend service entryis a bit different 
  # but still quite similar. Just makes a basic container
  # for the frontend.
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    depends_on:
      server_b:
        condition: service_healthy
    networks:
      - backend

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
